{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/react/react-native+expo/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Native on Expo\",\n  \"link\": \"https://docs.expo.io/\",\n  \"tags\": [\"react\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Start new project by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expo init\"), \" and choosing a template\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The mobile device should be on the same network for emulation in the expo client for phones.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"View\"), \" component is already \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"box-sizing: border-box\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Flexbox has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"flexDirection:column\"), \" as default.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pass mutliple styles through array like this \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{[]}\"), \". For same properties, the elements at end have a preference.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React Native doesn't use CSS so there is no cascading.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Platform\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"react-native\"), \" to control how elements appear in different operating systems.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pass data to navigation handlers like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"() => handleClick('route', data)\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Native on Expo","tags":["react"],"emoji":null,"link":"https://docs.expo.io/"},"fields":{"slug":"/react/react-native+expo/"},"tableOfContents":{},"parent":{"__typename":"File","relativePath":"react/react-native+expo.md"}}},"pageContext":{"id":"e19829a3-dc10-5933-968a-d9930c4a35af","previous":{"id":"164f5809-df4c-575c-903e-9fffdc3b47e2","frontmatter":{"title":"Python Tips","tags":["python"]},"fields":{"slug":"/py/py-small-tips/"}},"next":{"id":"62cf6a6f-c66b-5383-b713-7db8a7941e4a","frontmatter":{"title":"Logging","tags":["backend","best-practices"]},"fields":{"slug":"/logging/"}},"hasUntagged":true,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}