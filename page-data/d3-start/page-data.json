{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/d3-start/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"D3 Starter\",\n  \"tags\": [\"dataviz\"],\n  \"link\": \"https://www.newline.co/fullstack-d3\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Assuming d3 has been imported in index.html file\\nasync function drawLineChart() {\\n  // Load the dataset\\n  const dataset = await d3.json(\\\"./data.json\\\");\\n  // Access the required properties.\\n  // Also you can pass parsers for anything not in the correct format.\\n  const yAccessor = (d) => d.property1;\\n  const xAccessor = (d) => d.property2;\\n  // For the chart wrapper\\n  // Margins are for axes and legends.\\n  let dimensions = {\\n    width: window.innerWidth * 0.9,\\n    height: 400,\\n    margin: {\\n      top: 15,\\n      right: 15,\\n      bottom: 40,\\n      left: 60,\\n    },\\n  };\\n  // For elements contained within the axes\\n  dimensions.boundedWidth =\\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\\n  dimensions.boundedHeight =\\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\\n  // Append a SVG element to the wrapper with a height and width\\n  const wrapper = d3\\n    .select(\\\"#wrapper\\\") \\n    .append(\\\"svg\\\")\\n    .attr(\\\"width\\\", dimensions.width)\\n    .attr(\\\"height\\\", dimensions.height);\\n  // Append a g tag to the SVG\\n  const bounds = wrapper\\n    .append(\\\"g\\\")\\n    .style(\\n      \\\"transform\\\",\\n      `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`\\n    );\\n  // Scales numerical values on the Y-axis\\n  const yScale = d3\\n    .scaleLinear()\\n    .domain(d3.extent(dataset, yAccessor))\\n    .range([dimensions.boundedHeight, 0]) // bottom-to-top\\n    .nice();\\n  // Scales numerical values on the Y-axis\\n  const xScale = d3\\n    .scaleLinear()\\n    .domain(d3.extent(dataset, xAccessor))\\n    .range([0, dimensions.boundedWidth]) // right-to-left\\n    .nice();\\n\\n  // TODO: This is the place where the actual chart will be created.\\n\\n  // Create the axes\\n  const yAxisGenerator = d3.axisLeft().scale(yScale);\\n  const yAxis = bounds.append(\\\"g\\\").call(yAxisGenerator);\\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\\n  const xAxis = bounds\\n    .append(\\\"g\\\")\\n    .call(xAxisGenerator)\\n    .style(\\\"transform\\\", `translateY(${dimensions.boundedHeight}px)`);\\n\\n  const xAxisLabel = xAxis\\n    .append(\\\"text\\\")\\n    .attr(\\\"x\\\", dimensions.boundedWidth / 2)\\n    .attr(\\\"y\\\", dimensions.margin.bottom - 10)\\n    .attr(\\\"fill\\\", \\\"black\\\")\\n    .style(\\\"font-size\\\", \\\"1.4em\\\")\\n    .text(\\\"Label on X\\\");\\n}\\n\\ndrawLineChart();\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"wrapper\"), \" element in HTML will contain everything in our chart.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"g\"), \" elements are used for grouping.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".axisLeft()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".axisRight()\"), \" methods are for positioning of tickers and orientations of axes (not its placement).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A server needs to be started to load the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"json\"), \" file. Install \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"live-server\"), \" through \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm\"), \" and use it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Apart from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".scaleLinear()\"), \" methods, there are others like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".scaleTime()\"), \" for dates etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SVG elements default to black fill and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"no stroke\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Labels inherit a fill value of none. That's why they need to be set explicitly.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"SVG values for Y axis are counted from top to bottom.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".nice()\"), \" method on scales rounds up the values to be axis friendly.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"D3 Starter","tags":["dataviz"],"emoji":null,"link":"https://www.newline.co/fullstack-d3"},"fields":{"slug":"/d3-start/"},"tableOfContents":{},"parent":{"__typename":"File","relativePath":"d3-start.md"}}},"pageContext":{"id":"1903317a-ab8b-5bd1-ae57-45b614ff56be","previous":{"id":"e4569cd1-527d-58ec-ad2a-d62e74f1a013","frontmatter":{"title":"D3 Checklist","tags":["dataviz"]},"fields":{"slug":"/d3-checklist/"}},"next":{"id":"a11c4b90-0d7a-5789-92ae-ced8a51b57a2","frontmatter":{"title":"Using cURL","tags":null},"fields":{"slug":"/curl/"}},"hasUntagged":true,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}