{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/the-linux-cmd/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tips from The Linux CMD Line\",\n  \"link\": \"http://linuxcommand.org/tlcl.php\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A shell is the program that takes in input through keyboard commands and passess them onto the OS. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bash\"), \" is a shell program. Things like Hyper or iTerm are terminal emulators.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#\"), \" on shell-prompt indicates superuser or root privilege.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: This book was Linux oriented so all commands might not work in *nix or Windows.\")), mdx(\"p\", null, \"List of Commands\\nDirectory\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pwd\"), \" - Print current working directory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cd\"), \" - Change directory (default: home)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ls\"), \" - List directory contents (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-a\"), \" displays hidden files)\")), mdx(\"p\", null, \"Date & Time\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"date\"), \" - Display date & time\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cal\"), \" - Display current month's calendar\")), mdx(\"p\", null, \"Disk & Memory\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"df\"), \" - See disk capacity and utility\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"free\"), \" - See free memory\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Tips from The Linux CMD Line","tags":null,"emoji":null,"link":"http://linuxcommand.org/tlcl.php"},"fields":{"slug":"/the-linux-cmd/"},"tableOfContents":{},"parent":{"__typename":"File","relativePath":"the-linux-cmd.md"}}},"pageContext":{"id":"d92758bc-c9d3-5074-9f7e-11005150eda0","previous":{"id":"7993c7f8-ce87-5b05-8e66-9414ad54aa37","frontmatter":{"title":"Web working principles","tags":null},"fields":{"slug":"/web-working/"}},"next":{"id":"72a4afef-3d26-5797-be69-eec63794788d","frontmatter":{"title":"Simulate async API fetching in React","tags":["react"]},"fields":{"slug":"/react/fake-async-react/"}},"hasUntagged":true,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}